{"version":3,"sources":["utils/dateUtils.js","utils/apiCalls.js","utils/portfolioUtils.js","utils/chartUtils.js","components/PortfolioChart.js","utils/utilities.js","components/PortfolioSummary.js","components/StockListRow.js","components/EditableStockListRow.js","components/StockList.js","components/AddLot.js","components/App.js","serviceWorker.js","index.js"],"names":["getDateRange","startDate","endDate","dateRange","copyOfStartDate","Date","numDates","push","toISOString","setDate","getDate","setTimeToNoon","date","dateCopy","setHours","setDateToUtcMidnight","timezoneOffset","getTimezoneOffset","newDate","getHours","yesterday","getLastValidPrice","ticker","a","price","i","getStockPrice","isoDate","dateUtils","storageKey","storedValue","JSON","parse","window","localStorage","getItem","dateFormattedForApi","split","apiUrl","fetch","response","json","stockPrice","close","setItem","stringify","getPortfolio","getChartLabels","portfolio","portfolioUtils","xAxisLabels","dataPoints","fetchPortfolioValuePromises","promises","Promise","all","portfolioValues","fillChartLabels","fetchPortfolioValue","dateObject","portfolioValue","lotIndex","boughtShares","lots","boughtDate","stockPrices","resolve","reject","apiCalls","entries","isNaN","Math","round","Number","EPSILON","prevValue","forEach","value","moment","format","getChartData","range","chartLabels","toDate","today","chartData","labels","datasets","label","data","fill","borderColor","borderWidth","lineTension","RangePicker","DatePicker","PortfolioChart","state","submitted","options","maintainAspectRatio","handleDateChange","chartUtils","setState","undefined","this","prevProps","prevState","current","endOf","id","className","redraw","onSubmit","handleSubmit","defaultValue","subtract","ranges","Today","startOf","disabledDate","onChange","Component","calculatePercentChange","oldValue","newValue","toFixed","getNumberOfShares","index","portfolioEntry","soldShares","PortfolioSummary","todaysValue","yesterdaysValue","dayGain","setSubmittedState","utilities","name","StockListRow","todaysPrice","yesterdaysPrice","handleClick","props","onDelete","onEdit","boughtPrice","lot","numShares","boughtDateObj","formattedDate","getFullYear","getMonth","broker","onClick","EditableStockListRow","handlers","delete","shares","save","onSaveOrCancel","cancel","btnName","handleChange","e","target","StockList","useState","setRerender","editing","setEditing","setId","deleteRow","length","splice","rerender","editRow","finishEditingRow","console","log","rows","key","AddLot","tailLayout","wrapperCol","offset","span","componentSize","setComponentSize","labelCol","labelAlign","layout","initialValues","size","onValuesChange","onFinish","values","uuidv4","toUpperCase","soldDate","soldPrice","onFinishFailed","errorInfo","Item","rules","required","message","pattern","type","htmlType","Header","Layout","Content","Footer","App","href","style","padding","margin","float","textAlign","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.791a5c02.chunk.js","sourcesContent":["import moment from 'moment';\n\n/**\n * Takes two dates and creates an array of all dates\n * between them, inclusive.\n *\n * @param {Object} startDate\n * @param {Object} endDate\n */\nexport const getDateRange = (startDate, endDate) => {\n  const dateRange = [];\n  let copyOfStartDate = new Date(startDate);\n  let numDates = (endDate - startDate) / (60 * 60 * 24 * 1000);\n  for (; numDates >= 0; numDates--) {\n    dateRange.push(copyOfStartDate.toISOString());\n    copyOfStartDate.setDate(copyOfStartDate.getDate() + 1);\n  }\n  return dateRange;\n};\n\n/**\n * Converts Date objects to match the date picker's\n * format. Basically the date picker just defaults\n * dates to local date, 12pm.\n *\n * @param {Date} date\n */\nexport const setTimeToNoon = (date) => {\n  const dateCopy = new Date(date);\n  dateCopy.setHours(12, 0, 0, 0);\n  return dateCopy;\n};\n\n/**\n * Converts 12pm local Date objects to 12am UTC.\n *\n * The date picker creates Date objects with the time set as 12pm local time.\n * This is incompatible with the stock API, which uses UTC 12am.\n *\n * @param {Date} date Fri May 01 2020 12:00:00 GMT-0700 (Pacific Daylight Time)\n * @returns {Date} 2020-05-01T00:00:00.000Z\n */\nexport const setDateToUtcMidnight = (date) => {\n  const timezoneOffset = date.getTimezoneOffset();\n  const newDate = setTimeToNoon(date);\n  newDate.setHours(newDate.getHours() - timezoneOffset / 60 - 12);\n  return newDate;\n};\n\nexport const yesterday = () => {\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  return yesterday;\n};\n","import * as dateUtils from './dateUtils';\n\n/**\n *\n * @param {String} ticker\n * @param {Date} date\n * @return {Number} stockPrice\n */\nexport async function getLastValidPrice(ticker, date) {\n  let price = 0;\n  for (let i = 0; i < 5; i++) {\n    price = await getStockPrice(ticker, date);\n    if (!price) {\n      date.setDate(date.getDate() - 1);\n    } else {\n      return price;\n    }\n  }\n}\n\n/**\n *\n * @param {String} ticker\n * @param {Date} date\n * @return {Number} stockPrice\n *\n * https://fast-spire-77124.herokuapp.com/prices/IBM/2021-03-30\n * returns:\n *\n * [{\"date\":\"2021-03-30T00:00:00.000Z\",\"close\":134.72,\"high\":136.27,\"low\":134.02,\"open\":135.86, \"volume\":4790366,\"adjClose\":134.72,\"adjHigh\":136.27,\"adjLow\":134.02,\"adjOpen\":135.86, \"adjVolume\":4790366,\"divCash\":0,\"splitFactor\":1}]\n *\n * returns [] if it’s a non-trading day.\n */\nexport async function getStockPrice(ticker, date) {\n  const isoDate = dateUtils.setDateToUtcMidnight(date).toISOString();\n  const storageKey = `${ticker}-${isoDate}`;\n  const storedValue = JSON.parse(window.localStorage.getItem(storageKey));\n  /*\n   * Cannot use `if(!storedValue)` here, since `localstorage.getItem()`\n   * returns `null` if there is not a key/value set, in which case,\n   * the default case needs to run.\n   */\n  if (storedValue === '') {\n    return 0;\n  } else if (storedValue) {\n    return storedValue;\n  }\n  const dateFormattedForApi = dateUtils\n    .setDateToUtcMidnight(date)\n    .toISOString()\n    .split('T')[0];\n  const apiUrl = `https://fast-spire-77124.herokuapp.com/prices/${ticker}/${dateFormattedForApi}`;\n  const response = await fetch(apiUrl);\n  const json = await response.json();\n  const stockPrice = (json[0] || { close: '' }).close || '';\n  window.localStorage.setItem(storageKey, JSON.stringify(stockPrice));\n  return stockPrice;\n}\n\nexport async function getStockMetadata(ticker) {\n  const storageKey = `${ticker}`;\n  const storedValue = JSON.parse(window.localStorage.getItem(storageKey));\n  /*\n   * Cannot use `if(!storedValue)` here, since `localstorage.getItem()`\n   * returns `null` if there is not a key/value set, in which case,\n   * the default case needs to run.\n   */\n  if (storedValue === 'invalid') {\n    return false;\n  } else if (storedValue === 'valid') {\n    return true;\n  }\n  window.localStorage.setItem(storageKey, undefined);\n\n  const apiUrl = `https://fast-spire-77124.herokuapp.com/meta/${ticker}`;\n  const response = await fetch(apiUrl);\n  const json = await response.text();\n  window.localStorage.setItem(storageKey, JSON.stringify(json));\n  return json;\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport * as portfolioUtils from '../utils/portfolioUtils';\n\n/**\n *\n * @param {string} ticker\n * @param {number} boughtShares\n * @param {number} boughtPrice\n * @param {Date} boughtDate\n * @param {string} broker\n */\nexport function addLotToPortfolio(\n  ticker,\n  boughtShares,\n  boughtPrice,\n  boughtDate,\n  broker\n) {\n  if (ticker) {\n    let portfolio = portfolioUtils.getPortfolio();\n    if (!portfolio) {\n      window.localStorage.setItem(\n        'portfolio',\n        JSON.stringify({\n          name: 'To The Moon',\n          lots: [],\n        })\n      );\n      portfolio = portfolioUtils.getPortfolio();\n    }\n    portfolio.lots.push({\n      id: uuidv4(),\n      ticker: ticker.toUpperCase(),\n      boughtShares,\n      boughtDate,\n      boughtPrice,\n      broker,\n      soldShares: 0,\n      soldDate: '',\n      soldPrice: 0,\n    });\n    window.localStorage.setItem('portfolio', JSON.stringify(portfolio));\n  }\n}\n\nexport function getPortfolio() {\n  return JSON.parse(window.localStorage.getItem('portfolio'));\n}\n\nexport function deleteLotFromPortfolio(id) {\n  const portfolio = this.getPortfolio();\n  if (portfolio) {\n    let index;\n    for (let i = 0; i < portfolio.lots.length; i++) {\n      if (id === portfolio.lots[i]['id']) {\n        index = i;\n      }\n    }\n    if (index >= 0) {\n      portfolio.lots.splice(index, 1);\n      window.localStorage.setItem('portfolio', JSON.stringify(portfolio));\n    }\n  }\n}\n\nexport function updatePortfolio(\n  id,\n  ticker,\n  boughtShares,\n  boughtDate,\n  boughtPrice,\n  broker\n) {\n  const portfolio = getPortfolio();\n  if (portfolio) {\n    let index;\n    for (let i = 0; i < portfolio.lots.length; i++) {\n      if (id === portfolio.lots[i]['id']) {\n        index = i;\n      }\n    }\n    if (index >= 0) {\n      if (ticker) {\n        portfolio.lots[index].ticker = ticker;\n      }\n      if (boughtShares) {\n        portfolio.lots[index].boughtShares = boughtShares;\n      }\n      if (boughtDate) {\n        portfolio.lots[index].boughtDate = boughtDate;\n      }\n      if (boughtPrice) {\n        portfolio.lots[index].boughtPrice = boughtPrice;\n      }\n      if (broker) {\n        portfolio.lots[index].broker = broker;\n      }\n      window.localStorage.setItem('portfolio', JSON.stringify(portfolio));\n    }\n  }\n}\n","import moment from 'moment';\nimport * as apiCalls from './apiCalls';\nimport * as dateUtils from './dateUtils';\nimport * as portfolioUtils from '../utils/portfolioUtils';\n\n/**\n * @param {Date} startDate\n * @param {Date} endDate\n */\nexport const getChartLabels = async (startDate, endDate) => {\n  const portfolio = portfolioUtils.getPortfolio();\n  if (!portfolio) {\n    return { xAxisLabels: [], dataPoints: [] };\n  }\n  const dateRange = dateUtils.getDateRange(startDate, endDate);\n  const promises = await fetchPortfolioValuePromises(dateRange, portfolio);\n  const portfolioValues = await Promise.all(promises);\n  const { xAxisLabels, dataPoints } = fillChartLabels(\n    dateRange,\n    portfolioValues\n  );\n  return { xAxisLabels, dataPoints };\n};\n\n/**\n * @param {Object} portfolio\n * @param {Date} dateObject\n */\nexport const fetchPortfolioValue = async (portfolio, dateObject) => {\n  let portfolioValue = 0;\n  for (let i = 0; i < 5; i++) {\n    const promises = [];\n    const boughtShares = [];\n    for (const lotIndex in portfolio.lots) {\n      const boughtDate = new Date(portfolio.lots[lotIndex].boughtDate);\n      const dateIsInRange = boughtDate <= dateObject;\n      if (dateIsInRange) {\n        const stockPrices = new Promise(async (resolve, reject) => {\n          const stockPrice = await apiCalls.getStockPrice(\n            portfolio.lots[lotIndex].ticker,\n            dateObject\n          );\n          resolve(stockPrice);\n        });\n        promises.push(stockPrices);\n        boughtShares.push(portfolio.lots[lotIndex].boughtShares);\n      }\n    }\n    const stockPrices = await Promise.all(promises);\n    for (const [i, price] of stockPrices.entries()) {\n      if (!isNaN(price)) {\n        portfolioValue += price * boughtShares[i];\n      }\n    }\n    if (!portfolioValue) {\n      dateObject.setDate(dateObject.getDate() - 1);\n    } else {\n      portfolioValue = Math.round(portfolioValue * 100 + Number.EPSILON) / 100;\n      return portfolioValue;\n    }\n  }\n};\n\nfunction fillChartLabels(dateRange, portfolioValues) {\n  let prevValue = 0;\n  const xAxisLabels = [];\n  const dataPoints = [];\n  dateRange.forEach((date, i) => {\n    const value = portfolioValues[i];\n    if (!isNaN(value)) {\n      dataPoints.push(value);\n      prevValue = value;\n    } else {\n      dataPoints.push(prevValue);\n    }\n    xAxisLabels.push(moment(date).format('YYYY-MM-DD'));\n  });\n  return { xAxisLabels, dataPoints };\n}\n\nexport const fetchPortfolioValuePromises = async (dateRange, portfolio) => {\n  const promises = [];\n\n  dateRange.forEach((date) => {\n    const dateObject = new Date(date);\n    promises.push(\n      new Promise(async (resolve) =>\n        resolve(await fetchPortfolioValue(portfolio, dateObject))\n      )\n    );\n  });\n  return promises;\n};\n\nexport const getChartData = async (range, startDate, endDate) => {\n  let chartLabels;\n  if (range) {\n    chartLabels = await getChartLabels(range[0], range[1]);\n  } else if (startDate && endDate) {\n    chartLabels = await getChartLabels(startDate.toDate(), endDate.toDate());\n  } else {\n    const today = dateUtils.setTimeToNoon(new Date());\n    let startDate = new Date();\n    startDate.setHours(12, 0, 0, 0);\n    startDate.setDate(startDate.getDate() - 6);\n    chartLabels = await getChartLabels(startDate, today);\n  }\n\n  const chartData = {\n    labels: chartLabels.xAxisLabels,\n    datasets: [\n      {\n        label: 'Portfolio value over time',\n        data: chartLabels.dataPoints,\n        fill: false,\n        borderColor: ['rgba(0, 200, 5, 1)'],\n        borderWidth: 1,\n        lineTension: 0,\n      },\n    ],\n  };\n\n  return chartData;\n};\n","import React, { Component } from 'react';\nimport { DatePicker } from 'antd';\nimport { Line } from 'react-chartjs-2';\nimport * as chartUtils from '../utils/chartUtils';\nimport * as dateUtils from '../utils/dateUtils';\nimport moment from 'moment';\n\nconst { RangePicker } = DatePicker;\n\nexport class PortfolioChart extends Component {\n  state = { submitted: false };\n\n  // Options for rendering Chart.js.\n  options = () => {\n    return {\n      maintainAspectRatio: false,\n    };\n  };\n\n  async componentDidMount() {\n    const chartData = await chartUtils.getChartData(\n      undefined,\n      this.state.startDate,\n      this.state.endDate\n    );\n    this.setState({ chartData: chartData });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (this.state.submitted !== prevState.submitted) {\n      const chartData = await chartUtils.getChartData(\n        undefined,\n        this.state.startDate,\n        this.state.endDate\n      );\n      this.setState({ chartData: chartData });\n    }\n  }\n\n  handleDateChange = async (range) => {\n    const chartData = await chartUtils.getChartData(range);\n    this.setState({ chartData: chartData });\n  };\n\n  disabledDate(current) {\n    // Cannot select days after today\n    return current > moment().endOf('day');\n  }\n\n  render() {\n    return (\n      <div>\n        <table id=\"the-chart\">\n          <tbody>\n            <tr>\n              <td>\n                <div className=\"chart-wrapper\">\n                  <Line\n                    redraw={false}\n                    data={\n                      this.state.chartData || {\n                        labels: [],\n                        datasets: [\n                          {\n                            label: 'Portfolio value over time',\n                            data: [],\n                            fill: false,\n                            borderColor: ['rgba(0, 200, 5, 1)'],\n                            borderWidth: 1,\n                            lineTension: 0,\n                          },\n                        ],\n                      }\n                    }\n                    options={this.options()}\n                  />\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <form onSubmit={this.handleSubmit}>\n          <h3>Select a date range for the chart</h3>\n          <RangePicker\n            defaultValue={[moment().subtract(1, 'weeks'), moment()]}\n            ranges={{\n              Today: [moment(), moment()],\n              'Last 30 days': [moment().subtract(1, 'months'), moment()],\n              'This week': [moment().subtract(1, 'weeks'), moment()],\n              'Last week': [\n                moment().subtract(2, 'weeks'),\n                moment().subtract(1, 'weeks'),\n              ],\n              'Last month': [\n                moment().subtract(1, 'months').startOf('month'),\n                moment().subtract(1, 'months').endOf('month'),\n              ],\n            }}\n            disabledDate={this.disabledDate}\n            onChange={this.handleDateChange}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n","import * as portfolioUtils from '../utils/portfolioUtils';\n\nexport const falseFunc = () => false;\n\n/**\n *\n * @param {number} oldValue\n * @param {number} newValue\n */\nexport function calculatePercentChange(oldValue, newValue) {\n  if (oldValue && newValue) {\n    return (((newValue - oldValue) / oldValue) * 100).toFixed(2) + '%';\n  } else {\n    return 0;\n  }\n}\n\nexport function getNumberOfShares(index) {\n  const portfolio = portfolioUtils.getPortfolio();\n  if (portfolio) {\n    const portfolioEntry = portfolio.lots[index];\n    return portfolioEntry.boughtShares - portfolioEntry.soldShares;\n  }\n  return 0;\n}\n","import React, { Component } from 'react';\nimport { PortfolioChart } from './PortfolioChart';\nimport * as chartUtils from '../utils/chartUtils';\nimport * as dateUtils from '../utils/dateUtils';\nimport * as portfolioUtils from '../utils/portfolioUtils';\nimport * as utilities from '../utils/utilities';\n\nclass PortfolioSummary extends Component {\n  state = { submitted: false, todaysValue: 0, yesterdaysValue: 0, dayGain: 0 };\n\n  setSubmittedState = (state) => {\n    this.setState({ submitted: state });\n  };\n\n  fetchPortfolioValue = async (date = new Date()) => {\n    const portfolio = portfolioUtils.getPortfolio();\n    if (!portfolio) {\n      return 0;\n    }\n    const dateCopy = dateUtils.setTimeToNoon(date);\n    return await chartUtils.fetchPortfolioValue(portfolio, dateCopy);\n  };\n\n  async componentDidMount() {\n    const todaysValue = await this.fetchPortfolioValue();\n    let yesterday = dateUtils.yesterday();\n    const yesterdaysValue = await this.fetchPortfolioValue(yesterday);\n    const dayGain = todaysValue - yesterdaysValue;\n    utilities.calculatePercentChange(yesterdaysValue, todaysValue);\n\n    this.setState({\n      todaysValue,\n      yesterdaysValue,\n      dayGain: dayGain.toFixed(2),\n    });\n  }\n\n  render() {\n    const portfolio = portfolioUtils.getPortfolio();\n\n    return (\n      <div className=\"main\">\n        <div>\n          <h2>{portfolio && portfolio.name}</h2>\n          Current value: ${this.state.todaysValue}\n        </div>\n        <div>\n          Day Gain: ${this.state.dayGain} (+\n          {this.state.yesterdaysValue > 0\n            ? ((this.state.dayGain / this.state.yesterdaysValue) * 100).toFixed(\n                2\n              )\n            : 0}\n          %)\n          <br />\n          {/* Total Gain: ${totalGain} (\n          {((totalGain / depositValue) * 100).toFixed(2)}%) */}\n        </div>\n        <PortfolioChart submitted={this.setSubmittedState} />\n      </div>\n    );\n  }\n}\n\nexport default PortfolioSummary;\n","import React, { Component } from 'react';\nimport * as apiCalls from '../utils/apiCalls';\nimport * as dateUtils from '../utils/dateUtils';\nimport * as portfolioUtils from '../utils/portfolioUtils';\nimport * as utilities from '../utils/utilities';\n\nexport class StockListRow extends Component {\n  state = { todaysPrice: 0, yesterdaysPrice: 0 };\n\n  handleClick = (name, id) => {\n    if (name === 'delete') {\n      this.props.onDelete(id);\n    }\n    if (name === 'edit') {\n      this.props.onEdit(id);\n    }\n  };\n\n  async componentDidMount() {\n    const today = new Date();\n    const todaysPrice = await apiCalls.getLastValidPrice(\n      this.props.ticker,\n      today\n    );\n\n    const yesterday = dateUtils.yesterday();\n    const yesterdaysPrice = await apiCalls.getLastValidPrice(\n      this.props.ticker,\n      yesterday\n    );\n\n    this.setState({\n      todaysPrice,\n      yesterdaysPrice,\n      boughtPrice: this.props.boughtPrice,\n    });\n  }\n\n  render() {\n    const portfolio = portfolioUtils.getPortfolio();\n    const id = portfolio.lots[this.props.lot].id;\n    let yesterdaysValue = 0;\n    let todaysValue = 0;\n\n    if (this.state.todaysPrice && this.state.yesterdaysPrice) {\n      yesterdaysValue = this.props.numShares * this.state.yesterdaysPrice;\n      todaysValue = this.props.numShares * this.state.todaysPrice;\n    }\n    const boughtDateObj = new Date(this.props.boughtDate);\n    const formattedDate = `${boughtDateObj.getFullYear()}-${\n      boughtDateObj.getMonth() + 1\n    }-${boughtDateObj.getDate()}`;\n\n    return (\n      <tr>\n        {/* <td>{id}</td> */}\n        <td>{this.props.ticker}</td>\n        <td>{formattedDate}</td>\n        <td>{this.props.numShares}</td>\n        <td>{this.props.boughtPrice}</td>\n        <td>\n          {/* today's close */}\n          {this.state.todaysPrice ? `$${this.state.todaysPrice}` : 0}\n        </td>\n        <td>\n          {/* {Market Value} */}\n          {todaysValue ? `$${todaysValue.toFixed(2)}` : 0}\n        </td>\n        <td>\n          {/* {Daily Gain} */}\n          {todaysValue ? `$${(todaysValue - yesterdaysValue).toFixed(2)}` : 0}\n          <br />\n          {utilities.calculatePercentChange(yesterdaysValue, todaysValue)}\n        </td>\n        <td>\n          {/* {Total gain} */}\n          {this.state.todaysPrice\n            ? `$${(this.state.todaysPrice - this.state.boughtPrice).toFixed(2)}`\n            : 0}\n          <br />\n          {utilities.calculatePercentChange(\n            this.state.boughtPrice,\n            this.state.todaysPrice\n          )}\n        </td>\n        <td>{this.props.broker}</td>\n        <td>\n          <button onClick={() => this.handleClick('edit', id)}>Edit</button>\n        </td>\n        <td>\n          <button onClick={() => this.handleClick('delete', id)}>Delete</button>\n        </td>\n      </tr>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { DatePicker } from 'antd';\nimport * as apiCalls from '../utils/apiCalls';\nimport * as dateUtils from '../utils/dateUtils';\nimport * as portfolioUtils from '../utils/portfolioUtils';\nimport * as utilities from '../utils/utilities';\nimport moment from 'moment';\n\nexport class EditableStockListRow extends Component {\n  state = {};\n\n  handlers = {\n    delete: (id, ticker, shares) => {\n      this.props.onDelete(id);\n    },\n    save: (id, ticker, shares, boughtDate, boughtPrice, broker) => {\n      this.props.onSaveOrCancel(\n        id,\n        ticker,\n        shares,\n        boughtDate,\n        boughtPrice,\n        broker\n      );\n    },\n    cancel: (id, ticker, shares) => {\n      this.props.onSaveOrCancel();\n    },\n  };\n\n  /**\n   * @param {string} btnName\n   * @param {string} id Unique id of the row that is being edited.\n   * @param {string} ticker\n   * @param {number} numShares\n   */\n  handleClick = (\n    btnName,\n    id,\n    ticker,\n    numShares,\n    boughtDate,\n    boughtPrice,\n    broker\n  ) => {\n    this.handlers[btnName](\n      id,\n      ticker,\n      numShares,\n      boughtDate,\n      boughtPrice,\n      broker\n    );\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleDateChange = (date) => {\n    if (date) {\n      this.setState({ boughtDate: date.toDate() });\n    }\n  };\n\n  async componentDidMount() {\n    const today = new Date();\n    const todaysPrice = await apiCalls.getLastValidPrice(\n      this.props.ticker,\n      today\n    );\n\n    const yesterday = dateUtils.yesterday();\n    const yesterdaysPrice = await apiCalls.getLastValidPrice(\n      this.props.ticker,\n      yesterday\n    );\n\n    this.setState({\n      todaysPrice,\n      yesterdaysPrice,\n      boughtPrice: this.props.boughtPrice,\n    });\n  }\n  render() {\n    const portfolio = portfolioUtils.getPortfolio();\n    const id = portfolio.lots[this.props.lot].id;\n    let yesterdaysValue = 0;\n    let todaysValue = 0;\n\n    if (this.state.todaysPrice && this.state.yesterdaysPrice) {\n      yesterdaysValue = this.props.numShares * this.state.yesterdaysPrice;\n      todaysValue = this.props.numShares * this.state.todaysPrice;\n    }\n\n    return (\n      <tr>\n        {/* <td>\n          ID\n          {id}\n        </td> */}\n        <td>\n          {/* Stock */}\n          <input\n            name=\"ticker\"\n            value={this.state.ticker || this.props.ticker}\n            onChange={this.handleChange}\n          />\n        </td>\n        <td>\n          {/* Buy Date */}\n          <DatePicker\n            defaultValue={moment(this.props.boughtDate)}\n            name=\"boughtDate\"\n            onChange={this.handleDateChange}\n          />\n        </td>\n        <td>\n          {/* Shares */}\n          <input\n            name=\"numShares\"\n            value={this.state.numShares || this.props.numShares}\n            onChange={this.handleChange}\n          />\n        </td>\n        <td>\n          {/*Cost per share*/}\n          <input\n            name=\"boughtPrice\"\n            value={this.state.boughtPrice || this.props.boughtPrice}\n            onChange={this.handleChange}\n          />\n        </td>\n        <td>\n          {/* Today's Close */}\n          {this.state.todaysPrice ? `$${this.state.todaysPrice}` : 0}\n        </td>\n        <td>\n          {/* {Market Value} */}\n          {todaysValue ? `$${todaysValue.toFixed(2)}` : 0}\n        </td>\n        <td>\n          {/* {Daily Gain} */}\n          {todaysValue ? `$${(todaysValue - yesterdaysValue).toFixed(2)}` : 0}\n          <br />\n          {utilities.calculatePercentChange(yesterdaysValue, todaysValue)}\n        </td>\n        <td>\n          {/* {Total gain} */}\n          {this.state.todaysPrice\n            ? `$${(this.state.todaysPrice - this.state.boughtPrice).toFixed(2)}`\n            : 0}\n          <br />\n          {utilities.calculatePercentChange(\n            this.state.boughtPrice,\n            this.state.todaysPrice\n          )}\n        </td>\n        <td>\n          {/* Broker */}\n          <input\n            name=\"broker\"\n            value={this.state.broker || this.props.broker}\n            onChange={this.handleChange}\n          />\n        </td>\n        <td>\n          <button\n            name=\"save\"\n            onClick={() => {\n              this.handleClick(\n                'save',\n                id,\n                this.state.ticker,\n                this.state.numShares,\n                this.state.boughtDate,\n                this.state.boughtPrice,\n                this.state.broker\n              );\n            }}\n          >\n            Save\n          </button>\n          <button\n            name=\"cancel\"\n            onClick={() => {\n              this.handleClick('cancel', id);\n            }}\n          >\n            Cancel\n          </button>\n        </td>\n        <td>\n          <button name=\"delete\" onClick={() => this.handleClick('delete', id)}>\n            Delete\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { StockListRow } from './StockListRow';\nimport { EditableStockListRow } from './EditableStockListRow';\nimport * as portfolioUtils from '../utils/portfolioUtils';\nimport * as utilities from '../utils/utilities';\n\nconst StockList = (props) => {\n  const [rerender, setRerender] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const [id, setId] = useState();\n\n  const deleteRow = (id) => {\n    portfolioUtils.deleteLotFromPortfolio(id);\n    props.rerender();\n  };\n\n  const editRow = (id) => {\n    setEditing(true);\n    setId(id);\n  };\n\n  const finishEditingRow = (\n    id,\n    ticker,\n    boughtShares,\n    boughtDate,\n    boughtPrice,\n    broker\n  ) => {\n    console.log(broker, ticker);\n    if (id) {\n      portfolioUtils.updatePortfolio(\n        id,\n        ticker,\n        boughtShares,\n        boughtDate,\n        boughtPrice,\n        broker\n      );\n    }\n    setEditing(false);\n    setRerender(true);\n    props.rerender();\n  };\n\n  const rows = [];\n  const portfolio = portfolioUtils.getPortfolio();\n\n  if (portfolio) {\n    for (const lot in portfolio.lots) {\n      if (editing === true && portfolio.lots[lot].id === id) {\n        rows.push(\n          <EditableStockListRow\n            key={portfolio.lots[lot].id}\n            lot={lot}\n            onDelete={deleteRow}\n            onSaveOrCancel={finishEditingRow}\n            ticker={portfolio.lots[lot].ticker}\n            boughtDate={portfolio.lots[lot].boughtDate}\n            numShares={utilities.getNumberOfShares(lot)}\n            boughtPrice={portfolio.lots[lot].boughtPrice}\n            broker={portfolio.lots[lot].broker}\n          />\n        );\n      } else {\n        rows.push(\n          <StockListRow\n            key={portfolio.lots[lot].id}\n            lot={lot}\n            onDelete={deleteRow}\n            onEdit={editRow}\n            ticker={portfolio.lots[lot].ticker}\n            boughtDate={portfolio.lots[lot].boughtDate}\n            numShares={utilities.getNumberOfShares(lot)}\n            boughtPrice={portfolio.lots[lot].boughtPrice}\n            broker={portfolio.lots[lot].broker}\n          />\n        );\n      }\n    }\n  }\n\n  return (\n    <div className=\"main\">\n      <table id=\"stocklist\">\n        <tbody>\n          <tr>\n            {/* <th>ID</th> */}\n            <th>Stock</th>\n            <th>Buy Date</th>\n            <th>Shares</th>\n            <th>Cost per share</th>\n            <th>Today's close</th>\n            <th>Market Value</th>\n            <th>Daily Gain</th>\n            <th>Total Gain</th>\n            <th>Broker</th>\n            <th>Edit</th>\n            <th>Delete</th>\n          </tr>\n          {rows}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default StockList;\n","import React, { useState } from 'react';\nimport { DatePicker, Form, Input, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport '../css/index.css';\nimport * as portfolioUtils from '../utils/portfolioUtils';\nimport moment from 'moment';\n\nconst AddLot = (props) => {\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n  };\n\n  const [componentSize, setComponentSize] = useState('default');\n\n  const onFormLayoutChange = ({ size }) => {\n    setComponentSize(size);\n  };\n\n  const onFinish = (values) => {\n    portfolioUtils.addLotToPortfolio(\n      values.ticker,\n      values.boughtShares,\n      values.boughtPrice,\n      values.date.toDate(),\n      values.broker\n    );\n    props.rerender();\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const disabledDate = (current) => {\n    // Cannot select days after today\n    return current > moment().endOf('day');\n  };\n\n  return (\n    <>\n      <h3>Add a new lot</h3>\n      <Form\n        labelCol={{\n          span: 12,\n        }}\n        wrapperCol={{\n          span: 24,\n        }}\n        labelAlign=\"left\"\n        layout=\"horizontal\"\n        initialValues={{\n          size: componentSize,\n        }}\n        onValuesChange={onFormLayoutChange}\n        size={componentSize}\n        name=\"Add a lot\"\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"Buy date\"\n          name=\"date\"\n          rules={[\n            {\n              required: true,\n              message: 'Required',\n            },\n          ]}\n        >\n          <DatePicker disabledDate={disabledDate} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Ticker\"\n          name=\"ticker\"\n          rules={[\n            {\n              required: true,\n              message: 'Required',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Number of shares\"\n          name=\"boughtShares\"\n          rules={[\n            {\n              required: true,\n              message: 'Must be a number',\n              pattern: '^[0-9]*?.[0-9]*$',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Buy price\"\n          name=\"boughtPrice\"\n          rules={[\n            {\n              required: true,\n              message: 'Must be a number',\n              pattern: '^[0-9]*?.[0-9]*$',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Broker\"\n          name=\"broker\"\n          rules={[\n            {\n              required: true,\n              message: 'Required',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default AddLot;\n","import React, { Component } from 'react';\nimport PortfolioSummary from './PortfolioSummary';\nimport StockList from './StockList';\nimport AddLot from './AddLot';\nimport 'antd/dist/antd.css';\nimport '../css/index.css';\nimport { Layout, Breadcrumb } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\nclass App extends Component {\n  state = {};\n\n  rerender = () => {\n    this.setState({ rerender: true });\n  };\n\n  render() {\n    return (\n      <>\n        <Layout className=\"layout\">\n          <Header>\n            <h1>\n              My Kabu | <a href=\"https://github.com/ria-l/my-kabu\">Github</a>\n            </h1>\n          </Header>\n          <Content style={{ padding: '0 50px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}></Breadcrumb>\n            <div className=\"site-layout-content\">\n              <div>\n                <PortfolioSummary rerender={this.rerender} />\n              </div>\n              <div style={{ float: 'left' }}>\n                <AddLot rerender={this.rerender} />\n              </div>\n              <StockList rerender={this.rerender} />\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Ant Design ©2018 Created by Ant UED\n          </Footer>\n        </Layout>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}